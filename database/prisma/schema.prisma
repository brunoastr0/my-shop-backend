generator client {
  provider = "prisma-client-js"
}

datasource postgres {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String      @id @default(uuid()) @postgres.Uuid // UUID for tenant ID
  name       String
  users      User[]
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Product    Product[]
  Client     Client[]
  Order      Order[]
  OrderItem  OrderItem[]
}

model User {
  id         String   @id @default(cuid()) @postgres.Uuid
  first_name String?
  last_name  String?
  email      String   @unique
  active     Boolean  @default(false)
  tenant     Tenant   @relation(fields: [tenant_id], references: [id])
  tenant_id  String   @default(dbgenerated("(current_setting('app.current_tenant_id'::text))::UUID")) @postgres.Uuid // Changed from Int to String for UUID
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product {
  id                  String   @id @default(uuid()) @postgres.Uuid
  tenant_id           String   @default(dbgenerated("(current_setting('app.current_tenant_id'::text))::UUID"))
  product_name        String
  sale_price          Float    @default(0)
  quantity            Int      @default(0)
  product_description String
  published           Boolean  @default(true)
  created_at          DateTime @default(now())

  tenant    Tenant?     @relation(fields: [tenant_id], references: [id])
  OrderItem OrderItem[]
}

model Client {
  id           String   @id @default(uuid()) @postgres.Uuid
  tenant_id    String   @default(dbgenerated("(current_setting('app.current_tenant_id'::text))::UUID"))
  fullname     String
  email        String   @unique
  phone_number String?
  address      String?
  created_at   DateTime @default(now())

  tenant Tenant? @relation(fields: [tenant_id], references: [id])
  orders Order[]
}

model Order {
  id           String   @id @default(uuid()) @postgres.Uuid
  client_id    String   @postgres.Uuid
  tenant_id    String   @default(dbgenerated("(current_setting('app.current_tenant_id'::text))::UUID"))
  order_date   DateTime @default(now())
  total_amount Float    @default(0)
  status       String   @default("pending")

  client Client      @relation(fields: [client_id], references: [id])
  tenant Tenant?     @relation(fields: [tenant_id], references: [id])
  items  OrderItem[]
}

model OrderItem {
  id         String @id @default(uuid()) @postgres.Uuid
  order_id   String
  product_id String
  tenant_id  String @default(dbgenerated("(current_setting('app.current_tenant_id'::text))::UUID"))
  quantity   Int    @default(1)
  price      Float

  order   Order    @relation(fields: [order_id], references: [id])
  tenant  Tenant?  @relation(fields: [tenant_id], references: [id])
  product Product? @relation(fields: [product_id], references: [id])
}
