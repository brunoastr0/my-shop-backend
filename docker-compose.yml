
services:
  postgres:
    image: postgres
    container_name: postgres-docker
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_ADMIN_USERNAME}
      POSTGRES_PASSWORD: ${DB_ADMIN_PASSWORD}
      
      PGDATA: /data/postgres
    healthcheck:
        test: ["CMD-SHELL","pg_isready -d ${DB_DATABASE} -U ${DB_ADMIN_USERNAME}"]
        interval: 5s
        timeout: 5s
        retries: 5
    ports:
        - "5432:5432"

    # volumes:
    #   - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - node-network

  # Migration Service (uses admin user)
  migration:
    image: nodejs
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:postgrespassword@172.24.0.1:5432/my-shop
    depends_on:
      - postgres
    command: ["npx", "prisma", "migrate", "deploy"]
    restart: "on-failure"


  nodejs:
    image: nodejs
    container_name: nodejs
    build: 
      context: .
      dockerfile: ./dockerfiles/Dockerfile
    
    env_file:
      - ./.env
    volumes:
      - .:/app
    ports:
      - "80:80"
    restart: unless-stopped  
    environment:
      - PORT=80
      - DATABASE_URL=${DATABASE_URL}
      - ISSUER=${AUTH0_ISSUER}
      - AUDIENCE=${AUTH0_AUDIENCE}
    depends_on:
      postgres:
        condition: service_started
    networks:
      - node-network
    

networks:
  node-network:
      driver: bridge

volumes:
    postgres-data:
      driver: local
    node_modules: