services:
  postgres:
    image: postgres
    container_name: my-shop-postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_ADMIN_USERNAME}
      POSTGRES_PASSWORD: ${DB_ADMIN_PASSWORD}

      PGDATA: /data/postgres
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_ADMIN_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "54322:5432"

    # volumes:
    #   - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - node-network

  # Migration Service (uses admin user)
  migration:
    image: nodejs
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - postgres
    command: ["npx", "prisma", "migrate", "deploy"]
    restart: "on-failure"

  nodejs:
    image: nodejs
    container_name: my-shop-nodejs
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile

    env_file:
      - ./.env
    volumes:
      - .:/app
    ports:
      - "8080:3000"
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL_USER}

    depends_on:
      postgres:
        condition: service_started
    networks:
      - node-network

networks:
  node-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  node_modules:
